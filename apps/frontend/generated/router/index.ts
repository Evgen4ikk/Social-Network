/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../../src/routes/__root'
import { Route as SignupIndexImport } from './../../src/routes/signup/index'
import { Route as SigninIndexImport } from './../../src/routes/signin/index'
import { Route as ProfileIndexImport } from './../../src/routes/profile/index'
import { Route as MessengerIndexImport } from './../../src/routes/messenger/index'
import { Route as FriendsIndexImport } from './../../src/routes/friends/index'
import { Route as UserIdIndexImport } from './../../src/routes/user/$id/index'

// Create/Update Routes

const SignupIndexRoute = SignupIndexImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/signup/index.lazy').then((d) => d.Route),
)

const SigninIndexRoute = SigninIndexImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/signin/index.lazy').then((d) => d.Route),
)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/profile/index.lazy').then((d) => d.Route),
)

const MessengerIndexRoute = MessengerIndexImport.update({
  id: '/messenger/',
  path: '/messenger/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/messenger/index.lazy').then((d) => d.Route),
)

const FriendsIndexRoute = FriendsIndexImport.update({
  id: '/friends/',
  path: '/friends/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/friends/index.lazy').then((d) => d.Route),
)

const UserIdIndexRoute = UserIdIndexImport.update({
  id: '/user/$id/',
  path: '/user/$id/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../../src/routes/user/$id/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/friends/': {
      id: '/friends/'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof FriendsIndexImport
      parentRoute: typeof rootRoute
    }
    '/messenger/': {
      id: '/messenger/'
      path: '/messenger'
      fullPath: '/messenger'
      preLoaderRoute: typeof MessengerIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/signin/': {
      id: '/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninIndexImport
      parentRoute: typeof rootRoute
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/$id/': {
      id: '/user/$id/'
      path: '/user/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof UserIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/friends': typeof FriendsIndexRoute
  '/messenger': typeof MessengerIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/user/$id': typeof UserIdIndexRoute
}

export interface FileRoutesByTo {
  '/friends': typeof FriendsIndexRoute
  '/messenger': typeof MessengerIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/user/$id': typeof UserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/friends/': typeof FriendsIndexRoute
  '/messenger/': typeof MessengerIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/signin/': typeof SigninIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/user/$id/': typeof UserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/friends'
    | '/messenger'
    | '/profile'
    | '/signin'
    | '/signup'
    | '/user/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/friends'
    | '/messenger'
    | '/profile'
    | '/signin'
    | '/signup'
    | '/user/$id'
  id:
    | '__root__'
    | '/friends/'
    | '/messenger/'
    | '/profile/'
    | '/signin/'
    | '/signup/'
    | '/user/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  FriendsIndexRoute: typeof FriendsIndexRoute
  MessengerIndexRoute: typeof MessengerIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  SigninIndexRoute: typeof SigninIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
  UserIdIndexRoute: typeof UserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  FriendsIndexRoute: FriendsIndexRoute,
  MessengerIndexRoute: MessengerIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  SigninIndexRoute: SigninIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
  UserIdIndexRoute: UserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/friends/",
        "/messenger/",
        "/profile/",
        "/signin/",
        "/signup/",
        "/user/$id/"
      ]
    },
    "/friends/": {
      "filePath": "friends/index.tsx"
    },
    "/messenger/": {
      "filePath": "messenger/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/signin/": {
      "filePath": "signin/index.tsx"
    },
    "/signup/": {
      "filePath": "signup/index.tsx"
    },
    "/user/$id/": {
      "filePath": "user/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
